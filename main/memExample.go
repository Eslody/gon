package main

import (
	"fmt"
	"gon"
	"gon/cache"
	"gon/cache/persist"
	"time"
)


func main() {
	app := gon.Default()
	app.GET("/ping", func(c *gon.Context) {
		time.Sleep(1*time.Second)

		c.String(200,"ok")
	})

	v1 := app.Group("/v1")
	v1.Use(cache.CacheByPath(cache.Option{
		CacheDuration: 2 * time.Second,
		CacheStore:          persist.NewMemoryStore(1 * time.Minute),
		UseSingleFlight: true,
	}))
	v1.GET("/hello",
		func(c *gon.Context) {
			time.Sleep(1*time.Second)
			c.String(200, "博客园Logo\n首页\n新闻\n博问\n专区\n闪存\n班级\n代码改变世界\n搜索\n注册\n登录\n返回主页\n大数据从业者\n今日头条号：大数据从业者FelixZh 微信公众号：大数据从业者\n博客园首页新随笔联系管理订阅订阅随笔- 853  文章- 0  评论- 82  阅读- 267万 \nab和jmeter进行GET/POST压力测试的使用心得和比较\n引言： 互联网服务压测是非常重要的评价方法，ab，webbench，jmeter等都是业界流行的测试工具，ab和webbench作为shell模式下轻量级的测试工具，jmeter则作为有GUI界面的更高级测试工具，各有特点，ab比webbench功能更多一些，所以这里选择ab和jmeter来做一个对比。\n\n \n\n【测试环境的安装】\n【ab】\nab就是Apache Benchmark的缩写，顾名思义它是Apache组织开发的一款web压力测试工具，优点是使用方便，统计功能强大。\n\nab作为一款非常流行的压测工具，使用细节这里就不多介绍了，直接给出个人的使用体会：\n\n \n\n首先是安装，ubuntu和centos目前都提供自动安装命令 （至少ubuntu 14， centos 6可以）\n\nubuntu:sudo apt-get install apache2-utils \n\ncentos：yum install httpd-tools\n\n\n安装好之后就可以开始进行测试。\n\n \n\nab一般常用参数就是 -n， -t ，和 -c。\n\n-c（concurrency）表示用多少并发来进行测试；\n\n-t表示测试持续多长时间；\n\n-n表示要发送多少次测试请求。\n\n一般-t或者-n选一个用。\n\n \n\n对于模拟GET请求进行测试，ab非常简单，就是：ab -n 100 -c 10 'http://testurl.com/xxxx?para1=aaa&para2=bbb'\n\n对于模拟POST请求进行测试，则稍微复杂些，需要把将要post的数据（一般是json格式）放在文件里。比如一个post接口需要如下方式访问\n\ncurl -H 'Content-Type:application/json' -X POST  -d '{\"actionType\":\"collect\",\"appId\":1,\"contentId\":\"1770730744\",\"contentType\":\"musictrack\",\"did\":\"866479025346031\",\"endType\":\"mobile\",\"recommendId\":\"104169490_1_0_1434453099#1770730744#musictrack#USER_TO_SONG_TO_SONGS#gsql_similarity_content2content\",\"tabId\":0,\"uid\":\"104169490\"}' http://localhost:8083/query/leui/v0/post/user/behavior/content\n\n需要吧-d 后面的json数据放在一个文件里，比如建立一个文件post_data.txt，放入：\n\n{\"actionType\":\"collect\",\"appId\":1,\"contentId\":\"1770730744\",\"contentType\":\"musictrack\",\"did\":\"866479025346031\",\"endType\":\"mobile\",\"recommendId\":\"104169490_1_0_1434453099#1770730744#musictrack#USER_TO_SONG_TO_SONGS#gsql_similarity_content2content\",\"tabId\":0,\"uid\":\"104169490\"}\n\n然后用-p参数解析并发送这个json数据：ab -n 100 -c 10 -p post_data.txt -T 'application/json' http://localhost:8083/query/leui/v0/post/user/behavior/content\n\n \n\n【Jmeter】\njmeter是一个非常强大和用户友好的GUI工具，http访问的参数设置基本应有尽有，软件的help里的用户手册图例比较丰富，对于初学者来说很好上手\n\n对于http测试的可配置参数有（1）http请求配置：测试目标host，端口，url路径，http请求参数，post的数据，http header（2）测试全局策略：测试发送的并发量，测试循环次数（jmeter没有测试时间的设定，只有不断发送测试请求反复重复多少次loop，或者无限重复）。对于（1）里每个可配置的参数都可以用变量${varaible_name}来代替，而araiable可以来自CSV格式的外部输入，GUI有“测试计划（test plan）右键点击-----添加-----配置元件-----CSV Data Set Config 里可以设置CSV 文件来源和CSV里每列数据对应的变量名称。\n\n上面说的功能还有其他强大功能设置，在help文档和很多网上资料里都有详细介绍,比如CSV输入设置（博客），这里不再赘述。\n\n一般来说，主要用到以下设置界面\n\n新建测试计划（Test Plan)\n\nTest Plan ---- 新建 Thread Group(线程组）\n\n线程组 ---- 配置元件----HTTP Header Manager\n\n线程组-----配置元件---CSV Data Set Config\n\n线程组---sampler（采样器） -----HTTP 请求， 这里面有两个tab，一个是“parameters“ tab， 配置http请求参数，一个是“post data” tab，可配置post的数据，一般是一个json串，json串里的字段都可以用${xxx}这样的变量来表示。\n\n \n\n这几个界面配置好即可，而且jmeter的配置保存时会生成.jmx文件，这个不只是用来保存修改配置用，而且还有一个更大的用处，就是在非GUI（命令行，shell）下运行。\n\n因为我们的压测环境往往是linux系统，而且为了最大程度的发挥压测工具的性能，不论系统还是压测工具都最好运行在非GUI模式\n\nlinuxshell下，因为jmeter是java开发的，无需安装，只需要把jmeter解压后，在解压路径下，运行\n\n{jmeter_install_dir)/}bin/jmeter -n -t $target -l xxxx.jtl\n\n-n 就是静默模;\n\n-t 后面就跟.jmx配置文件的路径;\n\n-l 跟一个输出文件用于记录每次请求的时间，可以用jmeter GUI打开生成最终统计聚合报告。\n\n在命令行模式下运行jmeter，还可以从命令行（shell）输入参数，只要在jmeter命令后的参数列表里加上  -JXXXX = value , XXXX被jmeter识别为一个外部输入变量，其值是value， 在jmerter配置里用${__P(XXXX)}来使用这个外部输入变量，注意\"__P\"开头是连着的两个下划线。\n\n \n\n【测试构建和效果对比】\n下面我们用一个实际的例子来进行ab和jmeter压力测试的效果对比, 首先是GET请求。\n\n【ab】\n先用10个并发压测100秒。\n\n]# ab -t 100 -c 10 'http://localhost:8083/xxxx?uid=1233435&did=123456789&appId=1'\n\n\nThis is ApacheBench, Version 2.3 <Revision:655654>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking xxx.xxx.xxx.xxx (be patient)\nFinished 733 requests\n\n\nServer Software:        CppCMS-Embedded/1.0.4\nServer Hostname:      xxx.xxx.xxx.xxx\nServer Port:            8083\n\nDocument Path:         / xxx?uid=79057533&did=123456789&appId=1\nDocument Length:        4601 bytes\n\nConcurrency Level:      10\nTime taken for tests:   100.137 seconds\nComplete requests:      733\nFailed requests:        732\n   (Connect: 0, Receive: 0, Length: 732, Exceptions: 0)\nWrite errors:           0\nTotal transferred:      3672653 bytes\nHTML transferred:       3572232 bytes\nRequests per second:    7.32 [#/sec] (mean)\nTime per request:       1366.124 [ms] (mean)\nTime per request:       136.612 [ms] (mean, across all concurrent requests)\nTransfer rate:          35.82 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        1    2   2.4      2      40\nProcessing:   342 1352 636.3   1183    6046\nWaiting:      342 1351 636.2   1183    6046\nTotal:        345 1354 636.8   1186    6049\n\nPercentage of the requests served within a certain time (ms)\n  50%   1185\n  66%   1333\n  75%   1460\n  80%   1564\n  90%   1835\n  95%   2357\n  98%   3248\n  99%   5205\n 100%   6049 (longest request)\n\n \n\n【jmeter】\n再用jemeter以同样的配置（Thread数 为10， ramp时间为1秒，超时阈值为3000ms）\n\n运行结果如下：\nCreating summariser <summary>\nCreated the tree successfully using music_api_uid.jmx\nStarting the test @ Thu Nov 19 11:19:43 CST 2015 (1447903183454)\nWaiting for possible shutdown message on port 4445\nsummary +     90 in    16s =    5.7/s Avg:  1677 Min:   959 Max:  3757 Err:     0 (0.00%) Active: 10 Started: 10 Finished: 0\nsummary +    202 in  31.1s =    6.5/s Avg:  1477 Min:   912 Max:  2727 Err:     0 (0.00%) Active: 10 Started: 10 Finished: 0\nsummary =    292 in    46s =    6.4/s Avg:  1539 Min:   912 Max:  3757 Err:     0 (0.00%)\nsummary +    164 in    31s =    5.3/s Avg:  1830 Min:   972 Max:  5009 Err:     5 (3.05%) Active: 10 Started: 10 Finished: 0\nsummary =    456 in    76s =    6.0/s Avg:  1643 Min:   912 Max:  5009 Err:     5 (1.10\n\n最终通过GUI打开请求详细记录，生成聚合报告的结果为\n\nsamples: 576\n\naverage: 1713\n\nmedian: 1496\n\n90% Line: 2353\n\nmin: 912\n\nmax: 5009\n\nthrought: 5.8/sec\n\nkb/sec: 27.8\n\nerror%: 2.08%\n\n \n\n \n\nGET API压测结果对比\n \tab\tjmeter\n发送总请求数\t733\t576\n平均请求时间(ms)\t1366\t1713\n请求时间中位数（50%<)(ms)\t1185\t1496\n请求时间90%< (ms)\t1835\t2353\nerror\t \t2.08%\nQPS\t7.32\t6\n \n\n \n\n对比两次测试，ab完成了733次，而jmeter完成了576次而ab完成了733次，其实这个数据不算准确，因为jmeter不支持精确的测试时间的限制，所以我是按时强制终止了jemeter，所以有些请求可能就被漏掉了。不过我后来测试了同样总请求数时（ab用-n设置，jmeter则用 thread*loops来设置），jmeter也比ab慢戈15%，可能和jmeter自己要做很多统计有关系。\n\n因为测试时间不是严格相等，所以主要看平均：时间分布，ab普遍低一些。双方测试环境和测试参数都一致，不知道是不是jmeter在计算返回时间上算法不一样。平均时间，jmeter统计口径也是偏高\n\n我留了个心眼，查询了web接口后台日志，确保了两次测试的传参是一样的，那么结果的差别只能理解为两个软件在统计口径（比如返回时件的测量标准上），以及http访问方式上有差别( 比如同样是设置10个并发，一般是理解为开10个线程去不断的请求接口，但线程的调度策略不一样，对服务器的压力不一样，返回的性能也不一样）。\n\n \n\nGET测试对比完 ， 再来对比一下POST API测试的效果：\n\n【ab】：\n#ab -t 100 -c 10 -p post_data.txt -T 'application/json' http://localhost:8083/xxxxx\n\n\nThis is ApacheBench, Version 2.3 <Revision:655654>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking xxx.xxx.xxx.xxx (be patient)\nCompleted 5000 requests\nCompleted 10000 requests\nFinished 12937 requests\n\n\nServer Software:        CppCMS-Embedded/1.0.4\nServer Hostname:        xxx.xxx.xxx.xxx\nServer Port:            8083\n\nDocument Path:          /xxxxx\nDocument Length:        92 bytes\n\nConcurrency Level:      10\nTime taken for tests:   100.001 seconds\nComplete requests:      12937\nFailed requests:        0\nWrite errors:           0\nTotal transferred:      2962573 bytes\nTotal POSTed:           4828858\nHTML transferred:       1190204 bytes\nRequests per second:    129.37 [#/sec] (mean)\nTime per request:       77.299 [ms] (mean)\nTime per request:       7.730 [ms] (mean, across all concurrent requests)\nTransfer rate:          28.93 [Kbytes/sec] received\n                        47.16 kb/s sent\n                        76.09 kb/s total\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        1    2   8.9      1    1001\nProcessing:    31   76  78.5     69    2452\nWaiting:       31   75  77.7     69    2452\nTotal:         33   77  79.0     71    2454\n\nPercentage of the requests served within a certain time (ms)\n  50%     71\n  66%     80\n  75%     88\n  80%     91\n  90%    101\n  95%    113\n  98%    124\n  99%    140\n 100%   2454 (longest request)\n\n【jmeter】\n而同样参数配置的jmeter的结果为：\n\n#../apache-jmeter-2.11/bin/jmeter -n -t post.jmx -JCSV=post_paras.txt -JIP=xxx.xxx.xxx.xxx -JPORT=8083 -JTHREAD=10 -JRAMP=1 -l \"post_test.log\"\n\n\nCreating summariser <summary>\nCreated the tree successfully using post_to_recommend_user_action_server.jmx\nStarting the test @ Tue Nov 17 20:49:37 CST 2015 (1447764577991)\nWaiting for possible shutdown message on port 4445\nsummary +   3978 in  21.1s =  188.5/s Avg:    51 Min:    32 Max:  1049 Err:     0 (0.00%) Active: 10 Started: 10 Finished: 0\nsummary +   3796 in  30.1s =  126.2/s Avg:    78 Min:    34 Max:  1596 Err:     0 (0.00%) Active: 10 Started: 10 Finished: 0\nsummary =   7774 in  51.1s =  152.1/s Avg:    64 Min:    32 Max:  1596 Err:     0 (0.00%)\nsummary +   3273 in  30.1s =  108.8/s Avg:    91 Min:    37 Max:  3091 Err:     1 (0.03%) Active: 10 Started: 10 Finished: 0\nsummary =  11047 in  81.1s =  136.2/s Avg:    72 Min:    32 Max:  3091 Err:     1 (0.01%)\n\n对post_test.log进行聚合报告分析\n\nsamples: 11899   \n\naverage: 58\n\nmedian: 52\n\n90% line: 76\n\nmin: 27\n\nmax: 3091\n\nerror: 0.01%\n\nthroughout: 7.6/sec\n\nkb/sec: 1.9\n\n \n\npost api 压测结果对比\n \tab\tjmeter\n完成请求数\t12937\t11899\n平均返回时间（ms）\t77\t58\n最大返回时间（ms）\t \t3091\n最小返回时间（ms）\t \t27\n请求时间中位数(50%<)\t71\t52\n90%的请求反水时间低于（ms）\t101\t76\n错误率（基本是超时）\t0\t0.01%\nQPS\t129\t136\n \t \t \n \n\n \n\n【使用对比总结】\n个人体会是：\n\n统计效果上，ab占优：ab的优点是统计的结果可读性更强更能帮助人分析，至于一些参数的差异，主要看源代码实现了，但误差在可接受的范围内，作为压力测试，我们需要的是服务器面对压力的一个大致的能力和随着压力增大后服务器性能的变化趋势，所以ab和jmeter两个数字谁更精确是没太多意义的，反而是他俩数字差别不大就已经起到了互相印证的作用。\n\n压测方案指定上，jmeter占优：主要是jmeter支持可变参数和CSV数据集的输入，能设定更复杂的测试样例，适用范围更广。\n\nab不需要写配置文件，只需要几个命令行参数就能执行压测，适用于接口简单业务逻辑简单的http服务的测试。\n\n欢迎关注微信公众号：大数据从业者\n分类: 工具\n好文要顶 关注我 收藏该文  \n大数据从业者FelixZh\n关注 - 0\n粉丝 - 722\n+加关注\n10\n« 上一篇： linux历史命令查找快捷方式\n» 下一篇： apache ab压力测试报错（apr_socket_recv: Connection reset by peer (104)）\nposted @ 2018-01-16 11:00  大数据从业者FelixZh  阅读(1497)  评论(0)  编辑  收藏  举报\n刷新评论刷新页面返回顶部\n登录后才能查看或发表评论，立即 登录 或者 逛逛 博客园首页\n【推荐】七天玩转PolarDB开源创造营，阿里云、PG中文社区、白玉兰开源共同出品\n【推荐】百度智能云618年中大促，限时抢购，新老用户同享超值折扣\n【推荐】大型组态、工控、仿真、CAD\\GIS 50万行VC++源码免费下载!\n\n编辑推荐：\n· 七年三次大重构，聊聊我的重构成长史\n· 【.NET 与树莓派】LED 数码管驱动模块 —— TM1638\n· 高性能队列设计\n· .Net Core with 微服务 - Seq 日志聚合\n· 嵌入式行业入行3年的一点小感想\n\n最新新闻：\n· 奈雪的茶港交所上市，首日开盘破发市值超300亿港元\n· 2021青年消费调查报告：我们总结了7个趋势\n· 苹果领跑，大批新玩家入场，TWS蓝牙芯片格局恐生变\n· 每日优鲜破发成“韭菜第一股”后，叮咚买菜或成“最惨中概股”\n· 1925-2021，自动驾驶百年滥觞\n» 更多新闻...\n昵称： 大数据从业者FelixZh\n园龄： 6年10个月\n粉丝： 722\n关注： 0\n+加关注\n<\t2021年6月\t>\n日\t一\t二\t三\t四\t五\t六\n30\t31\t1\t2\t3\t4\t5\n6\t7\t8\t9\t10\t11\t12\n13\t14\t15\t16\t17\t18\t19\n20\t21\t22\t23\t24\t25\t26\n27\t28\t29\t30\t1\t2\t3\n4\t5\t6\t7\t8\t9\t10\n搜索\n \n \n常用链接\n我的随笔\n我的评论\n我的参与\n最新评论\n我的标签\n更多链接\n最新随笔\n1.java.util.concurrent.TimeoutException: Heartbeat of TaskManager with id container_1566481621886_4397244_01_000004 timed out.\n2.修改linux系统的时间EDT为CST\n3.ifconfig 查看网络丢包\n4.CentOS7 设置IPv6地址\n5.Linux关闭IPv6方法：How to disable IPv6 on Linux\n6.kafka binding to ipv6 port even though ipv4 address specified in config\n7.Debuting a Modern C++ API for Apache Kafka\n8.Benchmarking Apache Kafka, Apache Pulsar, and RabbitMQ: Which is the Fastest?\n9.Kafka实战：集群SSL加密认证和配置（最新版kafka-2.7.0）\n10.Postgresql 编译安装教程\n积分与排名\n积分 - 1024199\n排名 - 192\n随笔分类 (919)\nambari&kerberos(34)\napache nifi(3)\nBI & Metabase(3)\nC#(23)\nCentOS(7)\nCloud(12)\ncloudera(10)\nDataBase(2)\nDocker(17)\nELK & Solr(5)\nFlink(36)\nFluentd & Ruby(3)\nFlume(1)\nHadoop(54)\nHBase(29)\nhbase-index(1)\nHIVE(14)\nHudi(1)\nInfluxDB(2)\nJAVA(82)\nJSON(3)\nkafka(120)\nKafka(Confluent)(4)\nkeepalived(8)\nLinux(93)\nLinux IO & FS(16)\nLinux kernel(9)\nLinux Network(5)\nLinux Shell(5)\nLVS(1)\nMaven(1)\nmysql(11)\nnetwork(13)\nNginx&Openresty&Lua(48)\nNode.js(2)\nNTP(2)\nPhoenix(4)\nphp(4)\nPostgreSQL(4)\nPresto(1)\nPython(10)\nranger(7)\nredis(11)\nRocketMQ(2)\nscala&idea(4)\nspark(34)\nSpring(31)\nSQOOP(4)\nsupervisor(16)\nSystemTap(1)\nUbuntu(6)\nWEB(18)\nyaml(4)\nzeppelin(1)\nzookeeper(17)\n工具(48)\n人工神经网络(2)\n实习成果(8)\n数据结构(2)\n最新评论\n1. Re:flink-sql-gateway:Caused by: org.apache.flink.table.api.NoMatchingTableFactoryException: Could not find a suitable table factory for 'org.apache.flink.table.factories.CatalogFactory' in the classpath.\n感谢提示，最终解决了启动sql的所有报错：[root@cdh632-worker03 ~]# mv flink-connector-hive_2.12-1.12.2.jar $FLINK_HOME/l...\n--我只是一颗小小的石头\n2. Re:解决Linux系统buff/cache过大的问题\nfree -m显示的兆吧。。\n\n--纹身的西瓜\n3. Re:kafka 解密：破除单机topic数多性能下降魔咒\n厉害 有涨知识了\n\n--windjammer\n4. Re:修改rpm中的文件重新打包\n你好，博主，我遇到一个问题想要向你请教一下。我使用你的方法对rpm解压然后不做修改直接打包，发现打包后的rpm大小与解压前的不一致，请问如何解决。\n\n--幻天之蓝\n5. Re:数据可视化的开源方案: Superset vs Redash vs Metabase (一)\n关注下国人新开源的项目, 更面向开发者的一种方案 🔥完整!!前后端数据可视化平台,大屏, 支持Echarts,SQL,API,数据联动, 极低门槛,拿来即用,比拖拽更方便,可做为项目插件或独立平台应...\n--smartchart\n6. Re:HBase 是列式存储数据库吗\n其实hbase应该算混合+列族式的存储模型\n\n--西班牙馅饼\n7. Re:FileChannel（API详解）\n可以问问 为什么我 CREATE和WRITE同时使用还报错\nNoSuchFileException\n\n--燕子不会飞\n8. Re:简述同步IO、异步IO、阻塞IO、非阻塞IO之间的联系与区别\n精辟\n\n--一本正经小虫子\n9. Re:spark SQL读取ORC文件从Driver启动到开始执行Task(或stage)间隔时间太长（计算Partition时间太长）且产出orc单个文件中stripe个数太多问题解决方案\n你好，我也遇到了同样的问题，但是spark应该只识别spark.开头的配置，您建议的配置项应该是不会生效的，请问怎么解决呢\n\n--第一行bug\n10. Re:简述同步IO、异步IO、阻塞IO、非阻塞IO之间的联系与区别\n@just_try 精辟...\n--小镇做题家V3\n阅读排行榜\n1. Zookeeper的功能以及工作原理(407001)\n2. JAVA多线程实现的四种方式(254279)\n3. 查看linux中的TCP连接数(78293)\n4. ContainerBase.addChild: start: org.apache.catalina.LifecycleException: Failed to start component解决(73689)\n5. java判断字符串是否为数字或中文或字母(56016)\n6. Kafka、RabbitMQ、RocketMQ消息中间件的对比 —— 消息发送性能-转自阿里中间件(54505)\n7. 数据可视化的开源方案: Superset vs Redash vs Metabase (一)(50711)\n8. SecureCRT上传和下载文件(下载默认目录)(42875)\n9. Nginx使用教程(四)：提高Nginx网络吞吐量之buffers优化(31810)\n10. TCP连接与断开详解（socket通信）(31087)\n评论排行榜\n1. Zookeeper的功能以及工作原理(11)\n2. JAVA多线程实现的四种方式(7)\n3. MapReduce：详解Shuffle过程(5)\n4. 简述同步IO、异步IO、阻塞IO、非阻塞IO之间的联系与区别(3)\n5. Cloudera Manager和CDH5.8离线安装(3)\n6. TCP连接与断开详解（socket通信）(3)\n7. 个人经常查阅的网站（顺序无先后，持续更新）(3)\n8. 深入理解Java的接口和抽象类(3)\n9. ContainerBase.addChild: start: org.apache.catalina.LifecycleException: Failed to start component解决(3)\n10. HBase 是列式存储数据库吗(2)\n推荐排行榜\n1. Zookeeper的功能以及工作原理(40)\n2. JAVA多线程实现的四种方式(32)\n3. 数据可视化的开源方案: Superset vs Redash vs Metabase (一)(8)\n4. 简述同步IO、异步IO、阻塞IO、非阻塞IO之间的联系与区别(6)\n5. MapReduce：详解Shuffle过程(6)\nCopyright © 2021 大数据从业者FelixZh\nPowered by .NET 5.0 on Kubernetes "+fmt.Sprint(time.Now().Unix()))
		},
	)
	if err := app.Run(":8082"); err != nil {
		panic(err)
	}
}
